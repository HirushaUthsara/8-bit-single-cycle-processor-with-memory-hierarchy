
`timescale  1ns/100ps

module alu (DATA1, DATA2, RESULT, ZERO, SELECT);

	//definning input ports
	input [7:0] DATA1, DATA2;
	input [2:0] SELECT;

	//definning output ports
	output reg [7:0] RESULT;
	output reg [0:0] ZERO;
	
	//definning temparary wires to carry the result generated by each functional modules
	wire [7:0] RESULT_FW, RESULT_AD, RESULT_AND, RESULT_OR;
	
	//instantiating the each functional modules
	FORWARD fw (DATA2, RESULT_FW);
	ADD ad (DATA1, DATA2, RESULT_AD);
	AND an (DATA1, DATA2, RESULT_AND);
	OR orr (DATA1, DATA2, RESULT_OR);
	
	//The MUX implementation
	always @(RESULT_FW, RESULT_AD, RESULT_AND, RESULT_OR, SELECT)	//sensirive ports for the mux
	begin
		//definning case structure to handle the output of the mux according to the select signal
		case (SELECT)	
			3'b000 :	RESULT = RESULT_FW;		//if SELECT = 0; RESULT will get the output of FORWARD functional unit
			3'b001 :	RESULT = RESULT_AD;		//if SELECT = 1; RESULT will get the output of ADD functional unit
			3'b010 :	RESULT = RESULT_AND;	//if SELECT = 2; RESULT will get the output of AND functional unit
			3'b011 :	RESULT = RESULT_OR;		//if SELECT = 3; RESULT will get the output of OR functional unit
			default :	RESULT = 8'b0;	//if SELECT > 3; RESULT is set to the zero value
		endcase
	end
	
	always @(RESULT)
	begin
		if(RESULT == 8'd0)
			ZERO = 1'b1;
		else
			ZERO = 1'b0;
	end
	
endmodule

//FORWARD function implementation
module FORWARD (DATA2, RESULT);

	input [7:0] DATA2;		//definning input ports
	output reg [7:0] RESULT;	//definning output ports
	
	//Forward operation happens and result is stored in RESULT net
	always @(DATA2)
	#1 begin
		RESULT = DATA2;		//unit delay assign to 1 time unit
	end

endmodule

//ADD function implementation
module ADD (DATA1, DATA2, RESULT);
	
	input [7:0] DATA1, DATA2;	//definning input ports
	output reg [7:0] RESULT;	//definning output ports
	
	//ADD operation happens and result is stored in RESULT net
	always @(DATA1, DATA2)
	#2 begin
		RESULT = (DATA1 + DATA2);		//unit time delay assign to 2 time unit
	end
	
endmodule

//AND function implementation
module AND(DATA1, DATA2, RESULT);
	
	input [7:0] DATA1, DATA2;	//definning input ports
	output reg [7:0] RESULT;	//definning output ports
	
	//AND operation happens and result is stored in RESULT net
	always @(DATA1, DATA2)
	#1 begin
		RESULT = (DATA1 & DATA2);		//unit time delay assign to 1 time unit
	end
	
endmodule

//OR function implementation
module OR (DATA1, DATA2, RESULT);

	input [7:0] DATA1, DATA2;	//definning input ports
	output reg [7:0] RESULT;	//definning output ports
	
	//OR operation happen result is stored in RESULT net
	always @(DATA1, DATA2)
	#1 begin
		RESULT = (DATA1 | DATA2);		//unit time delay assign to 1 time unit
	end

endmodule